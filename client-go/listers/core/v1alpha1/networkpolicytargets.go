/*
 * Copyright (c) 2022 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/onmetal/onmetal-api-net/api/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetworkPolicyTargetsLister helps list NetworkPolicyTargetses.
// All objects returned here must be treated as read-only.
type NetworkPolicyTargetsLister interface {
	// List lists all NetworkPolicyTargetses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkPolicyTargets, err error)
	// NetworkPolicyTargetses returns an object that can list and get NetworkPolicyTargetses.
	NetworkPolicyTargetses(namespace string) NetworkPolicyTargetsNamespaceLister
	NetworkPolicyTargetsListerExpansion
}

// networkPolicyTargetsLister implements the NetworkPolicyTargetsLister interface.
type networkPolicyTargetsLister struct {
	indexer cache.Indexer
}

// NewNetworkPolicyTargetsLister returns a new NetworkPolicyTargetsLister.
func NewNetworkPolicyTargetsLister(indexer cache.Indexer) NetworkPolicyTargetsLister {
	return &networkPolicyTargetsLister{indexer: indexer}
}

// List lists all NetworkPolicyTargetses in the indexer.
func (s *networkPolicyTargetsLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkPolicyTargets, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkPolicyTargets))
	})
	return ret, err
}

// NetworkPolicyTargetses returns an object that can list and get NetworkPolicyTargetses.
func (s *networkPolicyTargetsLister) NetworkPolicyTargetses(namespace string) NetworkPolicyTargetsNamespaceLister {
	return networkPolicyTargetsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkPolicyTargetsNamespaceLister helps list and get NetworkPolicyTargetses.
// All objects returned here must be treated as read-only.
type NetworkPolicyTargetsNamespaceLister interface {
	// List lists all NetworkPolicyTargetses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkPolicyTargets, err error)
	// Get retrieves the NetworkPolicyTargets from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NetworkPolicyTargets, error)
	NetworkPolicyTargetsNamespaceListerExpansion
}

// networkPolicyTargetsNamespaceLister implements the NetworkPolicyTargetsNamespaceLister
// interface.
type networkPolicyTargetsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkPolicyTargetses in the indexer for a given namespace.
func (s networkPolicyTargetsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkPolicyTargets, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkPolicyTargets))
	})
	return ret, err
}

// Get retrieves the NetworkPolicyTargets from the indexer for a given namespace and name.
func (s networkPolicyTargetsNamespaceLister) Get(name string) (*v1alpha1.NetworkPolicyTargets, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("networkpolicytargets"), name)
	}
	return obj.(*v1alpha1.NetworkPolicyTargets), nil
}
