/*
 * Copyright (c) 2022 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	json "encoding/json"
	"fmt"
	"time"

	v1alpha1 "github.com/onmetal/onmetal-api-net/api/core/v1alpha1"
	corev1alpha1 "github.com/onmetal/onmetal-api-net/client-go/applyconfigurations/core/v1alpha1"
	scheme "github.com/onmetal/onmetal-api-net/client-go/onmetalapinet/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// NetworkPolicyTargetsesGetter has a method to return a NetworkPolicyTargetsInterface.
// A group's client should implement this interface.
type NetworkPolicyTargetsesGetter interface {
	NetworkPolicyTargetses(namespace string) NetworkPolicyTargetsInterface
}

// NetworkPolicyTargetsInterface has methods to work with NetworkPolicyTargets resources.
type NetworkPolicyTargetsInterface interface {
	Create(ctx context.Context, networkPolicyTargets *v1alpha1.NetworkPolicyTargets, opts v1.CreateOptions) (*v1alpha1.NetworkPolicyTargets, error)
	Update(ctx context.Context, networkPolicyTargets *v1alpha1.NetworkPolicyTargets, opts v1.UpdateOptions) (*v1alpha1.NetworkPolicyTargets, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.NetworkPolicyTargets, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.NetworkPolicyTargetsList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.NetworkPolicyTargets, err error)
	Apply(ctx context.Context, networkPolicyTargets *corev1alpha1.NetworkPolicyTargetsApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.NetworkPolicyTargets, err error)
	NetworkPolicyTargetsExpansion
}

// networkPolicyTargetses implements NetworkPolicyTargetsInterface
type networkPolicyTargetses struct {
	client rest.Interface
	ns     string
}

// newNetworkPolicyTargetses returns a NetworkPolicyTargetses
func newNetworkPolicyTargetses(c *CoreV1alpha1Client, namespace string) *networkPolicyTargetses {
	return &networkPolicyTargetses{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the networkPolicyTargets, and returns the corresponding networkPolicyTargets object, and an error if there is any.
func (c *networkPolicyTargetses) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.NetworkPolicyTargets, err error) {
	result = &v1alpha1.NetworkPolicyTargets{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("networkpolicytargetses").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of NetworkPolicyTargetses that match those selectors.
func (c *networkPolicyTargetses) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.NetworkPolicyTargetsList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.NetworkPolicyTargetsList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("networkpolicytargetses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested networkPolicyTargetses.
func (c *networkPolicyTargetses) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("networkpolicytargetses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a networkPolicyTargets and creates it.  Returns the server's representation of the networkPolicyTargets, and an error, if there is any.
func (c *networkPolicyTargetses) Create(ctx context.Context, networkPolicyTargets *v1alpha1.NetworkPolicyTargets, opts v1.CreateOptions) (result *v1alpha1.NetworkPolicyTargets, err error) {
	result = &v1alpha1.NetworkPolicyTargets{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("networkpolicytargetses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(networkPolicyTargets).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a networkPolicyTargets and updates it. Returns the server's representation of the networkPolicyTargets, and an error, if there is any.
func (c *networkPolicyTargetses) Update(ctx context.Context, networkPolicyTargets *v1alpha1.NetworkPolicyTargets, opts v1.UpdateOptions) (result *v1alpha1.NetworkPolicyTargets, err error) {
	result = &v1alpha1.NetworkPolicyTargets{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("networkpolicytargetses").
		Name(networkPolicyTargets.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(networkPolicyTargets).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the networkPolicyTargets and deletes it. Returns an error if one occurs.
func (c *networkPolicyTargetses) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("networkpolicytargetses").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *networkPolicyTargetses) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("networkpolicytargetses").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched networkPolicyTargets.
func (c *networkPolicyTargetses) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.NetworkPolicyTargets, err error) {
	result = &v1alpha1.NetworkPolicyTargets{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("networkpolicytargetses").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

// Apply takes the given apply declarative configuration, applies it and returns the applied networkPolicyTargets.
func (c *networkPolicyTargetses) Apply(ctx context.Context, networkPolicyTargets *corev1alpha1.NetworkPolicyTargetsApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.NetworkPolicyTargets, err error) {
	if networkPolicyTargets == nil {
		return nil, fmt.Errorf("networkPolicyTargets provided to Apply must not be nil")
	}
	patchOpts := opts.ToPatchOptions()
	data, err := json.Marshal(networkPolicyTargets)
	if err != nil {
		return nil, err
	}
	name := networkPolicyTargets.Name
	if name == nil {
		return nil, fmt.Errorf("networkPolicyTargets.Name must be provided to Apply")
	}
	result = &v1alpha1.NetworkPolicyTargets{}
	err = c.client.Patch(types.ApplyPatchType).
		Namespace(c.ns).
		Resource("networkpolicytargetses").
		Name(*name).
		VersionedParams(&patchOpts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
